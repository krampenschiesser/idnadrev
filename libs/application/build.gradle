/*
 * Copyright [2014] [Christian Loehnert, krampenschiesser@gmail.com]
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: "maven-publish"

version = "$applicationLibVersion"

dependencies {
    compile project(":libs:i18n")
    compile project(":libs:images")
    compile project(":libs:launch")
    compile project(":libs:validation")
    compile project(":libs:eventsystem")

    compile "org.controlsfx:controlsfx:$controlsFX"

    compile "com.fasterxml.jackson.core:jackson-databind:$jackson"
    compile "org.apache.deltaspike.cdictrl:deltaspike-cdictrl-api:$deltaspike"
    compile "javax.enterprise:cdi-api:$cdiapi"

    runtime "org.apache.deltaspike.cdictrl:deltaspike-cdictrl-weld:$deltaspike"
    runtime "org.jboss.weld.se:weld-se:$weld"
    runtime "org.jboss:jandex:$jandex"

    testCompile project(":libs:testutil")

    testRuntime "org.hibernate:hibernate-validator:$hibernateValidation"
    testRuntime "com.sun.el:el-ri:1.0"
}

def projects = [project(":libs:i18n"), project(":libs:images"), project(":libs:launch"), project(":libs:validation"), project(":libs:eventsystem"),
                project(":libs:reflection"), project(":libs:executor"), project(":libs:util")]

def alldependencyprojects = new ArrayList()
alldependencyprojects.addAll(projects)
alldependencyprojects.add(project(":libs:application"))

task sourceJar(type: Jar) {
    from alldependencyprojects.sourceSets.main.allJava
}

task fullJar(type: Jar) {
    dependsOn projects.build
    projects.each { subproject ->
        from subproject.configurations.archives.allArtifacts.files.collect {
            zipTree(it)
        }
    }
    from sourceSets.main.output.classesDir
}


task fullJavaDoc(type: Javadoc) {
    title = "$applicationLibTitle $applicationLibVersion"

    source = alldependencyprojects.sourceSets.main.allJava

    options.docletpath = configurations.asciidoclet.files.asType(List)
    options.doclet = 'org.asciidoctor.Asciidoclet'
    options.overview = "src/main/java/overview.adoc"
}

task javadocJar(type: Jar, dependsOn: fullJavaDoc) {
    classifier = 'javadoc'
    from fullJavaDoc.destinationDir
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId "$applicationLibTitle"
            version "$applicationLibVersion"

            artifact sourceJar {
                classifier "sources"
            }
            artifact fullJar {

            }

            artifact(javadocJar) {
                classifier = 'javadoc'
            }

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                def added = new HashSet()

                alldependencyprojects.each { project ->
                    project.configurations.compile.allDependencies.each {

                        if (!it.group.equals("de.ks") && !added.contains(it)) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                            dependencyNode.appendNode('scope', "compile")

                            added.add(it)
                        }
                    }
                    project.configurations.runtime.allDependencies.each {
                        if (!it.group.equals("de.ks") && !added.contains(it)) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                            dependencyNode.appendNode('scope', "runtime")

                            added.add(it)
                        }
                    }
                }

            }
        }
    }
}